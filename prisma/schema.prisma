// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model dokter {
  id String @id @default(cuid())
  nama String
  spesialisasi_dokter spesialisasi_dokter?
  klinik klinik @relation(fields: [klinikid],references: [id])
  klinikid String
  foto String
  dokter_hari_praktek dokter_hari_praktek[]
}

model spesialis {
  id String @id @default(cuid())
  name String
  spesialisasi_dokter spesialisasi_dokter[]
}

model spesialisasi_dokter {
  id String @id @default(cuid())
  dokter dokter @relation(fields: [dokterId],references: [id], onDelete: Cascade)
  dokterId String @unique
  spesiliasasi spesialis @relation(fields: [spesiliasasiId],references: [id] , onDelete: Cascade)
  spesiliasasiId String
}


model rumah_sakit {
  id String @id @default(cuid())
  nama String
  alamat String
  pinpoint String
  klinik klinik[]
  nomor_telepon String
  logo String
}

model klinik {
  id String @id @default(cuid())
  nama String
  rumah_sakit rumah_sakit @relation(fields: [rumah_sakitid],references: [id])
  rumah_sakitid String
  dokter dokter[]
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  nik String?
  nama_bapak String?
  nama_ibu String?
  alamat String?
  nomor_bpjs String?
  password String?
  tipe_darah String?
  jenis_kelamin String?
  tanggal_lahir DateTime?
  accounts      Account[]
  sessions      Session[]
  tiket tiket[]
}


// model pasien {
//   id String @id @default(cuid())
//   nama String
//   nohp String?
//   email String
//   tanggal_lahir String?
//   jenis_kelamin String?
//   tipe_darah String?
//   nik String?
//   nama_bapak  String?
//   nama_ibu  String?
//   nomor_bpjs String?
//   password String
//   alamat String?
// }


model dokter_hari_praktek {
  id String @id @default(cuid())
  dokter dokter @relation(fields: [dokterid], references: [id])
  dokterid String
  hari DateTime
  jam_praktek jam_praktek[]
}

model jam_praktek {
  id String @id @default(cuid())
  dokter_hari_praktek dokter_hari_praktek @relation(fields: [dokter_hari_praktekid], references: [id])
  dokter_hari_praktekid String
  start_time DateTime
  end_time DateTime
  tiket tiket[]
}

model tiket {
  id String @id @default(cuid())
  jam_praktek jam_praktek @relation(fields: [jam_praktekId], references: [id])
  jam_praktekId String
  user User @relation(fields: [emailId],references: [email])
  emailId String
  create_time DateTime
}


model post{
  id String @id @default(cuid())
  post_name String
  destail_post String
  comment comment []
}

model comment {
  id String @id @default(cuid())
  post post @relation(fields: [postId],references: [id])
  postId String
  comment String
}



model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}


model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
